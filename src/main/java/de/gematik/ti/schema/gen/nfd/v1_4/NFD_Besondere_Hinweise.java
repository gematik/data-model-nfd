/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.nfd.v1_4;

import de.gematik.ti.schema.gen.nfd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFD_Besondere_Hinweise  {
    
    public static final String NAMESPACE_PREFIX = "NFD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/nfds/NFD_Document/v1.4";
    
    // attributes:
    
    // elements:
    /*@isSingleAndOptionalValue*/
    
    public NFD_Schwangerschaft Schwangerschaft;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public List<NFD_Implantate> Implantate;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public List<NFD_Kommunikationsstoerungen> Kommunikationsstoerungen;
    
    /*@isSingleAndOptionalValue*/
    
    public NFD_Weglaufgefaehrdung Weglaufgefaehrdung;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public List<NFD_Sonstige_Hinweise> Sonstige_Hinweise;
    
    // default Constructor
    public NFD_Besondere_Hinweise() {
        
        this.Schwangerschaft = null;
        
        this.Implantate = new ArrayList<NFD_Implantate>();
        
        this.Kommunikationsstoerungen = new ArrayList<NFD_Kommunikationsstoerungen>();
        
        this.Weglaufgefaehrdung = null;
        
        this.Sonstige_Hinweise = new ArrayList<NFD_Sonstige_Hinweise>();
        
    }
    
    // copy Constructor
    public NFD_Besondere_Hinweise(NFD_Besondere_Hinweise _NFD_Besondere_Hinweise) {
        
        this.Schwangerschaft = _NFD_Besondere_Hinweise.Schwangerschaft;
        this.Implantate = _NFD_Besondere_Hinweise.Implantate;
        this.Kommunikationsstoerungen = _NFD_Besondere_Hinweise.Kommunikationsstoerungen;
        this.Weglaufgefaehrdung = _NFD_Besondere_Hinweise.Weglaufgefaehrdung;
        this.Sonstige_Hinweise = _NFD_Besondere_Hinweise.Sonstige_Hinweise;
    }
    
    public static NFD_Besondere_Hinweise deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFD_Besondere_Hinweise _NFD_Besondere_Hinweise = new NFD_Besondere_Hinweise();
        
        NodeList nodeListSchwangerschaft = element.getElementsByTagNameNS(NFD_Schwangerschaft.NAMESPACE_URI ,"Schwangerschaft");
        Node nodeSchwangerschaft = nodeListSchwangerschaft.item(0);
        _NFD_Besondere_Hinweise.Schwangerschaft = NFD_Schwangerschaft.deserialize(nodeSchwangerschaft);
        
        List<Node> nodeListImplantate = Utils.getChildrenWithName(element, NFD_Implantate.NAMESPACE_URI, "Implantate");
        _NFD_Besondere_Hinweise.Implantate = NFD_Implantate.deserializeToList(nodeListImplantate);
        
        List<Node> nodeListKommunikationsstoerungen = Utils.getChildrenWithName(element, NFD_Kommunikationsstoerungen.NAMESPACE_URI, "Kommunikationsstoerungen");
        _NFD_Besondere_Hinweise.Kommunikationsstoerungen = NFD_Kommunikationsstoerungen.deserializeToList(nodeListKommunikationsstoerungen);
        
        NodeList nodeListWeglaufgefaehrdung = element.getElementsByTagNameNS(NFD_Weglaufgefaehrdung.NAMESPACE_URI ,"Weglaufgefaehrdung");
        Node nodeWeglaufgefaehrdung = nodeListWeglaufgefaehrdung.item(0);
        _NFD_Besondere_Hinweise.Weglaufgefaehrdung = NFD_Weglaufgefaehrdung.deserialize(nodeWeglaufgefaehrdung);
        
        List<Node> nodeListSonstige_Hinweise = Utils.getChildrenWithName(element, NFD_Sonstige_Hinweise.NAMESPACE_URI, "Sonstige_Hinweise");
        _NFD_Besondere_Hinweise.Sonstige_Hinweise = NFD_Sonstige_Hinweise.deserializeToList(nodeListSonstige_Hinweise);
        
        return _NFD_Besondere_Hinweise;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFD_Besondere_Hinweise>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Schwangerschaft", this.Schwangerschaft);
        elemArray.put("Implantate", this.Implantate);
        elemArray.put("Kommunikationsstoerungen", this.Kommunikationsstoerungen);
        elemArray.put("Weglaufgefaehrdung", this.Weglaufgefaehrdung);
        elemArray.put("Sonstige_Hinweise", this.Sonstige_Hinweise);
        
        return elemArray;
    }
}

