/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.nfd.v1_3;

import de.gematik.ti.schema.gen.nfd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFD_Notfalldaten  {
    
    public static final String NAMESPACE_PREFIX = "NFD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/nfds/NFD_Document/v1.3";
    
    // attributes:
    /*@isRequired*/
    public String ID_NFD;
    
    /*@isRequired*/
    public String ID;
    
    /*@isRequired*/
    public String NFD_letzte_Aktualisierung_date;
    
    /*@isRequired*/
    public String NFD_letzte_Aktualisierung_time;
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public NFD_NFD_Versicherter NFD_Versicherter;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public NFD_NFD_Versicherter_Einwilligung NFD_Versicherter_Einwilligung;
    
    /*@isSingleAndOptionalValue*/
    
    public NFD_NFD_Befunddaten NFD_Befunddaten;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public List<NFD_NFD_Medikationseintrag> NFD_Medikationseintrag;
    
    /*@isSingleAndOptionalValue*/
    
    public NFD_NFD_Freiwillige_Zusatzinformationen NFD_Freiwillige_Zusatzinformationen;
    
    // default Constructor
    public NFD_Notfalldaten() {
        
        this.ID_NFD = new String();
        this.ID = new String();
        this.NFD_letzte_Aktualisierung_date = new String();
        this.NFD_letzte_Aktualisierung_time = new String();
        
        this.NFD_Versicherter = new NFD_NFD_Versicherter();
        
        this.NFD_Versicherter_Einwilligung = new NFD_NFD_Versicherter_Einwilligung();
        
        this.NFD_Befunddaten = null;
        
        this.NFD_Medikationseintrag = new ArrayList<NFD_NFD_Medikationseintrag>();
        
        this.NFD_Freiwillige_Zusatzinformationen = null;
        
    }
    
    // copy Constructor
    public NFD_Notfalldaten(NFD_Notfalldaten _NFD_Notfalldaten) {
        
        this.ID_NFD = _NFD_Notfalldaten.ID_NFD;
        this.ID = _NFD_Notfalldaten.ID;
        this.NFD_letzte_Aktualisierung_date = _NFD_Notfalldaten.NFD_letzte_Aktualisierung_date;
        this.NFD_letzte_Aktualisierung_time = _NFD_Notfalldaten.NFD_letzte_Aktualisierung_time;
        
        this.NFD_Versicherter = _NFD_Notfalldaten.NFD_Versicherter;
        this.NFD_Versicherter_Einwilligung = _NFD_Notfalldaten.NFD_Versicherter_Einwilligung;
        this.NFD_Befunddaten = _NFD_Notfalldaten.NFD_Befunddaten;
        this.NFD_Medikationseintrag = _NFD_Notfalldaten.NFD_Medikationseintrag;
        this.NFD_Freiwillige_Zusatzinformationen = _NFD_Notfalldaten.NFD_Freiwillige_Zusatzinformationen;
    }
    
    public static NFD_Notfalldaten deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFD_Notfalldaten _NFD_Notfalldaten = new NFD_Notfalldaten();
        
        _NFD_Notfalldaten.ID_NFD = element.getAttributeNode("ID_NFD") != null ? element.getAttributeNode("ID_NFD").getValue() : null;
        
        _NFD_Notfalldaten.ID = element.getAttributeNode("ID") != null ? element.getAttributeNode("ID").getValue() : null;
        
        _NFD_Notfalldaten.NFD_letzte_Aktualisierung_date = element.getAttributeNode("NFD_letzte_Aktualisierung_date") != null ? element.getAttributeNode("NFD_letzte_Aktualisierung_date").getValue() : null;
        
        _NFD_Notfalldaten.NFD_letzte_Aktualisierung_time = element.getAttributeNode("NFD_letzte_Aktualisierung_time") != null ? element.getAttributeNode("NFD_letzte_Aktualisierung_time").getValue() : null;
        
        NodeList nodeListNFD_Versicherter = element.getElementsByTagNameNS(NFD_NFD_Versicherter.NAMESPACE_URI ,"NFD_Versicherter");
        Node nodeNFD_Versicherter = nodeListNFD_Versicherter.item(0);
        _NFD_Notfalldaten.NFD_Versicherter = NFD_NFD_Versicherter.deserialize(nodeNFD_Versicherter);
        
        NodeList nodeListNFD_Versicherter_Einwilligung = element.getElementsByTagNameNS(NFD_NFD_Versicherter_Einwilligung.NAMESPACE_URI ,"NFD_Versicherter_Einwilligung");
        Node nodeNFD_Versicherter_Einwilligung = nodeListNFD_Versicherter_Einwilligung.item(0);
        _NFD_Notfalldaten.NFD_Versicherter_Einwilligung = NFD_NFD_Versicherter_Einwilligung.deserialize(nodeNFD_Versicherter_Einwilligung);
        
        NodeList nodeListNFD_Befunddaten = element.getElementsByTagNameNS(NFD_NFD_Befunddaten.NAMESPACE_URI ,"NFD_Befunddaten");
        Node nodeNFD_Befunddaten = nodeListNFD_Befunddaten.item(0);
        _NFD_Notfalldaten.NFD_Befunddaten = NFD_NFD_Befunddaten.deserialize(nodeNFD_Befunddaten);
        
        List<Node> nodeListNFD_Medikationseintrag = Utils.getChildrenWithName(element, NFD_NFD_Medikationseintrag.NAMESPACE_URI, "NFD_Medikationseintrag");
        _NFD_Notfalldaten.NFD_Medikationseintrag = NFD_NFD_Medikationseintrag.deserializeToList(nodeListNFD_Medikationseintrag);
        
        NodeList nodeListNFD_Freiwillige_Zusatzinformationen = element.getElementsByTagNameNS(NFD_NFD_Freiwillige_Zusatzinformationen.NAMESPACE_URI ,"NFD_Freiwillige_Zusatzinformationen");
        Node nodeNFD_Freiwillige_Zusatzinformationen = nodeListNFD_Freiwillige_Zusatzinformationen.item(0);
        _NFD_Notfalldaten.NFD_Freiwillige_Zusatzinformationen = NFD_NFD_Freiwillige_Zusatzinformationen.deserialize(nodeNFD_Freiwillige_Zusatzinformationen);
        
        return _NFD_Notfalldaten;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFD_Notfalldaten>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        attributesDict.put("ID_NFD", this.ID_NFD);
        attributesDict.put("ID", this.ID);
        attributesDict.put("NFD_letzte_Aktualisierung_date", this.NFD_letzte_Aktualisierung_date);
        attributesDict.put("NFD_letzte_Aktualisierung_time", this.NFD_letzte_Aktualisierung_time);
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("NFD_Versicherter", this.NFD_Versicherter);
        elemArray.put("NFD_Versicherter_Einwilligung", this.NFD_Versicherter_Einwilligung);
        elemArray.put("NFD_Befunddaten", this.NFD_Befunddaten);
        elemArray.put("NFD_Medikationseintrag", this.NFD_Medikationseintrag);
        elemArray.put("NFD_Freiwillige_Zusatzinformationen", this.NFD_Freiwillige_Zusatzinformationen);
        
        return elemArray;
    }
}

