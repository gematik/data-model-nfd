/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.nfd.v1_3;

import de.gematik.ti.schema.gen.nfd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFD_Sonstige_Hinweise  {
    
    public static final String NAMESPACE_PREFIX = "NFD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/nfds/NFD_Document/v1.3";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String sonstige_Hinweise;
    
    /*@isSingleAndOptionalValue*/
    
    public NFD_Diagnose_Indikation diagnostiziert_indiziert;
    
    // default Constructor
    public NFD_Sonstige_Hinweise() {
        
        this.sonstige_Hinweise = new String();
        
        this.diagnostiziert_indiziert = null;
        
    }
    
    // copy Constructor
    public NFD_Sonstige_Hinweise(NFD_Sonstige_Hinweise _NFD_Sonstige_Hinweise) {
        
        this.sonstige_Hinweise = _NFD_Sonstige_Hinweise.sonstige_Hinweise;
        this.diagnostiziert_indiziert = _NFD_Sonstige_Hinweise.diagnostiziert_indiziert;
    }
    
    public static NFD_Sonstige_Hinweise deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFD_Sonstige_Hinweise _NFD_Sonstige_Hinweise = new NFD_Sonstige_Hinweise();
        
        NodeList nodeListsonstige_Hinweise = element.getElementsByTagNameNS(NFD_Sonstige_Hinweise.NAMESPACE_URI ,"sonstige_Hinweise");
        
        if (nodeListsonstige_Hinweise.getLength() == 0) {
            _NFD_Sonstige_Hinweise.sonstige_Hinweise = null;
        } else {
            _NFD_Sonstige_Hinweise.sonstige_Hinweise = String.valueOf(((Element) nodeListsonstige_Hinweise.item(0)).getTextContent());
        }
        
        NodeList nodeListdiagnostiziert_indiziert = element.getElementsByTagNameNS(NFD_Diagnose_Indikation.NAMESPACE_URI ,"diagnostiziert_indiziert");
        Node nodediagnostiziert_indiziert = nodeListdiagnostiziert_indiziert.item(0);
        _NFD_Sonstige_Hinweise.diagnostiziert_indiziert = NFD_Diagnose_Indikation.deserialize(nodediagnostiziert_indiziert);
        
        return _NFD_Sonstige_Hinweise;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFD_Sonstige_Hinweise>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("sonstige_Hinweise", this.sonstige_Hinweise);
        elemArray.put("diagnostiziert_indiziert", this.diagnostiziert_indiziert);
        
        return elemArray;
    }
}

