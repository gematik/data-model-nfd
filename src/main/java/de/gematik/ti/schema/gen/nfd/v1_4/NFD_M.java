/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.nfd.v1_4;

import de.gematik.ti.schema.gen.nfd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class NFD_M  extends NFD_MeTyp {
    
    // attributes:
    /*@isOptional*/
    public String p;
    
    /*@isOptional*/
    public String ps;
    
    /*@isOptional*/
    public String a;
    
    /*@isOptional*/
    public String f;
    
    /*@isOptional*/
    public String fs;
    
    /*@isOptional*/
    public String fd;
    
    /*@isOptional*/
    public String m;
    
    /*@isOptional*/
    public String d;
    
    /*@isOptional*/
    public String v;
    
    /*@isOptional*/
    public String h;
    
    /*@isOptional*/
    public String t;
    
    /*@isOptional*/
    public String du;
    
    /*@isOptional*/
    public String dus;
    
    /*@isOptional*/
    public String dud;
    
    /*@isOptional*/
    public String i;
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public List<NFD_W> W;
    
    // default Constructor
    public NFD_M() {
        super();
        
        this.p = null;
        this.ps = null;
        this.a = null;
        this.f = null;
        this.fs = null;
        this.fd = null;
        this.m = null;
        this.d = null;
        this.v = null;
        this.h = null;
        this.t = null;
        this.du = null;
        this.dus = null;
        this.dud = null;
        this.i = null;
        
        this.W = new ArrayList<NFD_W>();
        
    }
    
    // copy Constructor
    public NFD_M(NFD_M _NFD_M) {
        super(_NFD_M);
        
        this.p = _NFD_M.p;
        this.ps = _NFD_M.ps;
        this.a = _NFD_M.a;
        this.f = _NFD_M.f;
        this.fs = _NFD_M.fs;
        this.fd = _NFD_M.fd;
        this.m = _NFD_M.m;
        this.d = _NFD_M.d;
        this.v = _NFD_M.v;
        this.h = _NFD_M.h;
        this.t = _NFD_M.t;
        this.du = _NFD_M.du;
        this.dus = _NFD_M.dus;
        this.dud = _NFD_M.dud;
        this.i = _NFD_M.i;
        
        this.W = _NFD_M.W;
    }
    
    // Constructor from superclass
    public NFD_M(NFD_MeTyp _NFD_MeTyp) {
        super(_NFD_MeTyp);
        
        this.p = null;
        this.ps = null;
        this.a = null;
        this.f = null;
        this.fs = null;
        this.fd = null;
        this.m = null;
        this.d = null;
        this.v = null;
        this.h = null;
        this.t = null;
        this.du = null;
        this.dus = null;
        this.dud = null;
        this.i = null;
        
        this.W = new ArrayList<NFD_W>();
        
    }
    
    // TODO correct deserializing of properties of parent element
    public static NFD_M deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        NFD_M _NFD_M = new NFD_M(NFD_MeTyp.deserialize(node));
        
        _NFD_M.p = element.getAttributeNode("p") != null ? element.getAttributeNode("p").getValue() : null;
        
        _NFD_M.ps = element.getAttributeNode("ps") != null ? element.getAttributeNode("ps").getValue() : null;
        
        _NFD_M.a = element.getAttributeNode("a") != null ? element.getAttributeNode("a").getValue() : null;
        
        _NFD_M.f = element.getAttributeNode("f") != null ? element.getAttributeNode("f").getValue() : null;
        
        _NFD_M.fs = element.getAttributeNode("fs") != null ? element.getAttributeNode("fs").getValue() : null;
        
        _NFD_M.fd = element.getAttributeNode("fd") != null ? element.getAttributeNode("fd").getValue() : null;
        
        _NFD_M.m = element.getAttributeNode("m") != null ? element.getAttributeNode("m").getValue() : null;
        
        _NFD_M.d = element.getAttributeNode("d") != null ? element.getAttributeNode("d").getValue() : null;
        
        _NFD_M.v = element.getAttributeNode("v") != null ? element.getAttributeNode("v").getValue() : null;
        
        _NFD_M.h = element.getAttributeNode("h") != null ? element.getAttributeNode("h").getValue() : null;
        
        _NFD_M.t = element.getAttributeNode("t") != null ? element.getAttributeNode("t").getValue() : null;
        
        _NFD_M.du = element.getAttributeNode("du") != null ? element.getAttributeNode("du").getValue() : null;
        
        _NFD_M.dus = element.getAttributeNode("dus") != null ? element.getAttributeNode("dus").getValue() : null;
        
        _NFD_M.dud = element.getAttributeNode("dud") != null ? element.getAttributeNode("dud").getValue() : null;
        
        _NFD_M.i = element.getAttributeNode("i") != null ? element.getAttributeNode("i").getValue() : null;
        
        List<Node> nodeListW = Utils.getChildrenWithName(element, NFD_W.NAMESPACE_URI, "W");
        _NFD_M.W = NFD_W.deserializeToList(nodeListW);
        
        return _NFD_M;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<NFD_M>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        attributesDict.put("p", this.p);
        attributesDict.put("ps", this.ps);
        attributesDict.put("a", this.a);
        attributesDict.put("f", this.f);
        attributesDict.put("fs", this.fs);
        attributesDict.put("fd", this.fd);
        attributesDict.put("m", this.m);
        attributesDict.put("d", this.d);
        attributesDict.put("v", this.v);
        attributesDict.put("h", this.h);
        attributesDict.put("t", this.t);
        attributesDict.put("du", this.du);
        attributesDict.put("dus", this.dus);
        attributesDict.put("dud", this.dud);
        attributesDict.put("i", this.i);
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    @Override
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        for (Map.Entry<String, Object> entry : super.getElements().entrySet()) {
            elemArray.put(entry.getKey(), entry.getValue());
        }
        
        elemArray.put("W", this.W);
        
        return elemArray;
    }
}

